"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readYamlEnv = exports.readYamlEnvSync = void 0;
var js_yaml_1 = require("js-yaml");
var lodash_1 = require("lodash");
var fs_1 = require("fs");
var readFile = fs_1.promises.readFile;
;
function replaceEnvVarRefsWithDefaults(val, customEnv) {
    var foundValue = val.replace(/\$\{(\w+)\}/g, function (substring, envVarName) {
        var envVarValue = undefined;
        if (typeof customEnv === 'function') {
            envVarValue = customEnv(envVarName) || process.env[envVarName];
        }
        else {
            var mergedValues = customEnv ? __assign(__assign({}, process.env), customEnv) : process.env;
            envVarName = mergedValues[envVarName];
        }
        if (envVarValue !== undefined) {
            return envVarValue;
        }
        throw new Error("Unknown environment variable referenced in config: " + envVarName + ". Specify environment variable or use defaults syntax.");
    });
    return foundValue.replace(/(.*)\${(\w+):(.*)}(.*)/g, function (match, prefix, envVarName, defValue, postfix) {
        var envValue = process.env[envVarName];
        if (envValue !== undefined) {
            return "" + prefix + envValue.trim() + postfix;
        }
        else {
            if (prefix || postfix) {
                return transformIfJSON("" + prefix + transformIfJSON(defValue) + postfix);
            }
            else {
                return transformIfJSON(defValue);
            }
        }
    });
}
function transformIfJSON(val) {
    try {
        return JSON.parse(val);
    }
    catch (e) {
        return val;
    }
}
function processYaml(target, value, key, envVariables) {
    if ((lodash_1.isPlainObject(value) || Array.isArray(value)) && Object.keys(value).length > 0) {
        for (var _i = 0, _a = Object.entries(value); _i < _a.length; _i++) {
            var _b = _a[_i], subKey = _b[0], subVal = _b[1];
            processYaml(target, subVal, key ? key + "." + subKey : subKey, envVariables);
        }
    }
    else if (key !== undefined) {
        lodash_1.set(target, key, typeof value === 'string' ? replaceEnvVarRefsWithDefaults(value, envVariables) : value);
    }
    return target;
}
/**
 * Replace env refs in yaml to values
 * @param {string | string[]} filePath path to yaml file
 * @param {{ jsyaml: LoadOptions }} options options
 * @param {Object<*>} customEnv custom environment object
 * @returns {Record<string, any>}
 */
exports.readYamlEnvSync = function (filePath, customEnv, options) {
    var replacedYaml = {};
    if (Array.isArray(filePath)) {
        for (var _i = 0, filePath_1 = filePath; _i < filePath_1.length; _i++) {
            var file = filePath_1[_i];
            var yaml = js_yaml_1.safeLoad(fs_1.readFileSync(file, 'utf-8'), options === null || options === void 0 ? void 0 : options.jsYaml);
            if (yaml) {
                replacedYaml = processYaml(replacedYaml, yaml, undefined, customEnv);
            }
        }
    }
    else {
        var yaml = js_yaml_1.safeLoad(fs_1.readFileSync(filePath, 'utf-8'));
        if (yaml) {
            replacedYaml = processYaml(replacedYaml, yaml, undefined, customEnv);
        }
    }
    return replacedYaml;
};
/**
 * Replace env refs in yaml to values async
 * @param {string | string[]} filePath path to yaml file
 * @param {{ jsyaml: LoadOptions }} options options
 * @param {Object<*>} customEnv custom environment object
 * @returns {Promise<Record<string, any>>}
 */
exports.readYamlEnv = function (filePath, customEnv, options) { return __awaiter(void 0, void 0, void 0, function () {
    var replacedYaml, _i, filePath_2, file, _file, yaml, _file, yaml;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                replacedYaml = {};
                if (!Array.isArray(filePath)) return [3 /*break*/, 5];
                _i = 0, filePath_2 = filePath;
                _a.label = 1;
            case 1:
                if (!(_i < filePath_2.length)) return [3 /*break*/, 4];
                file = filePath_2[_i];
                return [4 /*yield*/, readFile(file, 'utf-8')];
            case 2:
                _file = _a.sent();
                yaml = js_yaml_1.safeLoad(_file, options === null || options === void 0 ? void 0 : options.jsYaml);
                if (yaml) {
                    replacedYaml = processYaml(replacedYaml, yaml, undefined, customEnv);
                }
                _a.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [3 /*break*/, 7];
            case 5: return [4 /*yield*/, readFile(filePath, 'utf-8')];
            case 6:
                _file = _a.sent();
                yaml = js_yaml_1.safeLoad(_file, options === null || options === void 0 ? void 0 : options.jsYaml);
                if (yaml) {
                    replacedYaml = processYaml(replacedYaml, yaml, undefined, customEnv);
                }
                _a.label = 7;
            case 7: return [2 /*return*/, replacedYaml];
        }
    });
}); };
